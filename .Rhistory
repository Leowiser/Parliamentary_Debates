group_by(year, Government_Opposition) %>%
top_n(15, n) %>%
ungroup()
plots <- top_words %>%
group_by(year, Government_Opposition) %>%
do(plots = ggplot(., aes(x = reorder(word, n), y = n, fill = Government_Opposition)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Most Common Words in", unique(.$year), "-", unique(.$Government_Opposition)),
x = "Words",
y = "Frequency") +
theme_minimal() +
scale_fill_manual(values = c("Government" = "blue", "Opposition" = "red"))) %>%
.$plots
# Print each plot
for (plot in plots) {
print(plot)
}
combined_plot <- ggplot(top_words, aes(x = reorder(word, n), y = n, fill = Government_Opposition)) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip() +
facet_wrap(~ year, scales = "free_y") +
labs(title = "Most Common Words by Year and Government/Opposition",
x = "Words",
y = "Frequency") +
theme_minimal() +
scale_fill_manual(values = c("Government" = "blue", "Opposition" = "red"))
print(combined_plot)
top_words_combined <- word_counts %>%
top_n(15, n)
combined_plot <- ggplot(top_words_combined, aes(x = reorder(word, n), y = n, fill = Government_Opposition)) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip() +
facet_wrap(~ year, scales = "free_y") +
labs(title = "Most Common Words by Year and Government/Opposition",
x = "Words",
y = "Frequency") +
theme_minimal()
print(combined_plot)
top_words_combined <- word_counts %>%
top_n(15, n)%>%
ungroup()
combined_plot <- ggplot(top_words_combined, aes(x = reorder(word, n), y = n, fill = Government_Opposition)) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip() +
facet_wrap(~ year, scales = "free_y") +
labs(title = "Most Common Words by Year and Government/Opposition",
x = "Words",
y = "Frequency") +
theme_minimal()
top_words_combined <- word_counts %>%
group_by(year) %>%
top_n(15, n)%>%
ungroup()
combined_plot <- ggplot(top_words_combined, aes(x = reorder(word, n), y = n, fill = Government_Opposition)) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip() +
facet_wrap(~ year, scales = "free_y") +
labs(title = "Most Common Words by Year and Government/Opposition",
x = "Words",
y = "Frequency") +
theme_minimal()
top_words <- word_counts %>%
group_by(year, Government_Opposition) %>%
top_n(15, n)
top_words_combined <- word_counts %>%
group_by(year) %>%
top_n(15, n)
combined_plot <- ggplot(top_words_combined, aes(x = reorder(word, n), y = n, fill = Government_Opposition)) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip() +
facet_wrap(~ year, scales = "free_y") +
labs(title = "Most Common Words by Year and Government/Opposition",
x = "Words",
y = "Frequency") +
theme_minimal()
print(combined_plot)
combined_plot <- ggplot(top_words_combined, aes(x = reorder(word, n), y = n)) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip() +
facet_wrap(~ year, scales = "free_y") +
labs(title = "Most Common Words by Year and Government/Opposition",
x = "Words",
y = "Frequency") +
theme_minimal()
print(combined_plot)
combined_plot <- ggplot(top_words_combined, aes(x = reorder(word, n), y = n, color = "orange")) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip() +
facet_wrap(~ year, scales = "free_y") +
labs(title = "Most Common Words by Year and Government/Opposition",
x = "Words",
y = "Frequency") +
theme_minimal()
print(combined_plot)
combined_plot <- ggplot(top_words_combined, aes(x = reorder(word, n), y = n, fill = "orange")) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip() +
facet_wrap(~ year, scales = "free_y") +
labs(title = "Most Common Words by Year and Government/Opposition",
x = "Words",
y = "Frequency") +
theme_minimal()
print(combined_plot)
combined_plot <- ggplot(top_words_combined, aes(x = reorder(word, n), y = n)) +
geom_bar(stat = "identity", position = "dodge", fill = "orange") +
coord_flip() +
facet_wrap(~ year, scales = "free_y") +
labs(title = "Most Common Words by Year and Government/Opposition",
x = "Words",
y = "Frequency") +
theme_minimal()
print(combined_plot)
ggplot(top_words, aes(x = reorder(word, n), y = n, fill = Government_Opposition)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Most Common Words in", unique(.$year), "-", unique(.$Government_Opposition)),
x = "Words",
y = "Frequency") +
theme_minimal() +
scale_fill_manual(values = c("Government" = "blue", "Opposition" = "red"))
ggplot(top_words, aes(x = reorder(word, n), y = n, fill = Government_Opposition)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Most Common Words in", unique(top_words$year), "-", unique(top_words$Government_Opposition)),
x = "Words",
y = "Frequency") +
theme_minimal() +
scale_fill_manual(values = c("Government" = "blue", "Opposition" = "red"))
plots <- top_words %>%
group_by(year, Government_Opposition) %>%
do(plots = ggplot(., aes(x = reorder(word, n), y = n, fill = Government_Opposition)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Most Common Words in", unique(.$year), "-", unique(.$Government_Opposition)),
x = "Words",
y = "Frequency") +
theme_minimal() +
scale_fill_manual(values = c("Government" = "blue", "Opposition" = "red"))) %>%
.$plots
# Print each plot
for (plot in plots) {
print(plot)
}
filtered_words <- word_counts %>%
filter(Government_Opposition == "Government"|Government_Opposition == "Opposition") %>%  # Change to "Opposition" if needed
group_by(year, Government_Opposition) %>%
top_n(15, n) %>%
ungroup()
plots <- top_words %>%
group_by(year, Government_Opposition) %>%
do(plots = ggplot(., aes(x = reorder(word, n), y = n, fill = Government_Opposition)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Most Common Words in", unique(.$year), "-", unique(.$Government_Opposition)),
x = "Words",
y = "Frequency") +
theme_minimal() +
scale_fill_manual(values = c("Government" = "blue", "Opposition" = "red"))) %>%
.$plots
# Print each plot
for (plot in plots) {
print(plot)
}
filtered_words <- word_counts %>%
filter(!is.na(word)) %>%  # Change to "Opposition" if needed
group_by(year, Government_Opposition) %>%
top_n(15, n) %>%
ungroup()
plots <- top_words %>%
group_by(year, Government_Opposition) %>%
do(plots = ggplot(., aes(x = reorder(word, n), y = n, fill = Government_Opposition)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Most Common Words in", unique(.$year), "-", unique(.$Government_Opposition)),
x = "Words",
y = "Frequency") +
theme_minimal() +
scale_fill_manual(values = c("Government" = "blue", "Opposition" = "red"))) %>%
.$plots
# Print each plot
for (plot in plots) {
print(plot)
}
filtered_words <- word_counts %>%
filter(Government_Opposition == "Government", !is.na(word)) %>%  # Change to "Opposition" if needed
group_by(year, Government_Opposition) %>%
top_n(15, n) %>%
ungroup()
plots <- top_words %>%
group_by(year, Government_Opposition) %>%
do(plots = ggplot(., aes(x = reorder(word, n), y = n, fill = Government_Opposition)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Most Common Words in", unique(.$year), "-", unique(.$Government_Opposition)),
x = "Words",
y = "Frequency") +
theme_minimal() +
scale_fill_manual(values = c("Government" = "blue", "Opposition" = "red"))) %>%
.$plots
# Print each plot
for (plot in plots) {
print(plot)
}
filtered_words <- word_counts %>%
filter(!is.na(Government_Opposition)) %>%  # Change to "Opposition" if needed
group_by(year, Government_Opposition) %>%
top_n(15, n) %>%
ungroup()
plots <- top_words %>%
group_by(year, Government_Opposition) %>%
do(plots = ggplot(., aes(x = reorder(word, n), y = n, fill = Government_Opposition)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Most Common Words in", unique(.$year), "-", unique(.$Government_Opposition)),
x = "Words",
y = "Frequency") +
theme_minimal() +
scale_fill_manual(values = c("Government" = "blue", "Opposition" = "red"))) %>%
.$plots
# Print each plot
for (plot in plots) {
print(plot)
}
plots <- filtered_words %>%
group_by(year, Government_Opposition) %>%
do(plots = ggplot(., aes(x = reorder(word, n), y = n, fill = Government_Opposition)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Most Common Words in", unique(.$year), "-", unique(.$Government_Opposition)),
x = "Words",
y = "Frequency") +
theme_minimal() +
scale_fill_manual(values = c("Government" = "blue", "Opposition" = "red"))) %>%
.$plots
# Print each plot
for (plot in plots) {
print(plot)
}
plots <- filtered_words %>%
group_by(year, Government_Opposition) %>%
do(plots = ggplot(., aes(x = reorder(word, n), y = n, fill = Government_Opposition)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Most Common Words in", unique(.$year), "-", unique(.$Government_Opposition)),
x = "Words",
y = "Frequency") +
theme_minimal() +
scale_fill_manual(values = c("Government" = "steelblue", "Opposition" = "tomato1"))) %>%
.$plots
# Print each plot
for (plot in plots) {
print(plot)
}
number_debates <- df_clean %>%
group_by(year) %>%
summarize(distinct_combinations = n_distinct(debate_date, debate_title))
print(number_debates)
number_speakers <- df_clean %>%
group_by(year) %>%
summarize(distinct_combinations = n_distinct(speaker_name))
print(number_speakers)
knitr::opts_chunk$set(echo = TRUE)
filtered_words <- word_counts %>%
filter(!is.na(Government_Opposition)) %>%  # Change to "Opposition" if needed
group_by(Government_Opposition) %>%
top_n(15, n) %>%
ungroup()
plots <- filtered_words %>%
group_by(Government_Opposition) %>%
do(plots = ggplot(., aes(x = reorder(word, n), y = n, fill = Government_Opposition)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Most Common Words in", unique(.$year), "-", unique(.$Government_Opposition)),
x = "Words",
y = "Frequency") +
theme_minimal() +
scale_fill_manual(values = c("Government" = "steelblue", "Opposition" = "tomato1"))) %>%
.$plots
library(dplyr)
library(ggplot2)
filtered_words <- word_counts %>%
filter(!is.na(Government_Opposition)) %>%  # Change to "Opposition" if needed
group_by(Government_Opposition) %>%
top_n(15, n) %>%
ungroup()
# Load the web scraped data
df_Debates = read.csv("Parliamentary_Debates_Combined.csv", row.names = 1)
# Load the web scraped data
df_Debates = read.csv("Parliamentary_Debates_Combined.csv", row.names = 1)
# Delete all duplicated rows
df_clean <- distinct(df_Debates)
# Delete all rows where no speaker name exists as these are often not real speeches
# but the descriptions of the following debates
df_clean <- df_clean[!is.na(df_clean$speaker_name),]
# We will now try to find reoccurring speech contents to discard
# sentences that are following parliamental protocol but have no real meaning.
# However, they could effect our sentiment analysis.
df_value_counts <- df_clean %>%
group_by(speech_content) %>%
summarize(count = n()) %>%
filter(count > 4)
# Found sentences that occur often and should be filtered out as they are part of the
# parliamentary culture.
filter_list <- c("rose—","On a point of order, Mr Speaker.","indicated assent.",
"Will the Secretary of State give way?","indicated dissent.",
"Will my right hon. Friend give way?","Will the hon. Lady give way?",
"Will my hon. Friend give way?","Will the right hon. Gentleman give way?",
"Will the Minister give way?","Will the hon. Gentleman give way?",
"Will my right hon. and learned Friend give way?","Order.",
"Will the hon. and learned Lady give way?","Will the right hon. Lady give way?",
"I beg to move, That the clause be read a Second time.","rose —",
"Will the Prime Minister give way?","Will my hon. and learned Friend give way?",
"Will the Attorney General give way?","I will.",
"Will the hon. Gentleman give way on that point?","Will the Solicitor General give way?",
"Will the hon. and learned Gentleman give way?","I give way to my hon. Friend.",
"Will the Minister give way on that point?","I will give way to my hon. Friend.",
"Will my hon. Friend give way on that point?","Will the Foreign Secretary give way?",
"Will the hon. Lady give way on that point?","rose—[Interruption.]","I give way.",
"I will give way one more time.","I give way to the hon. Gentleman.",
"I will give way one last time.")
df_clean <- df_clean %>% filter(!speech_content %in% filter_list)
# clean the party column
# Check the current number of distinct values for the party
print(paste0("The current number of distinct party values: ",n_distinct(df_clean$speaker_party)))
# List of parties in the parliament during the 10 years
# as wel as other important positions
Parties <- c("Liberal Democrat", "Liberal Democrats", "Independent",
"Labour/Co-operative", "Co-operative","Labour", "Green",
"DUP", "Speaker", "Scottish National Party", "Conservative",
"Secretary","Shadow Minister", "Minister", "Plaid Cymru")
# Initialize a new column to store the matching substring(s)
df_clean$Party <- NA
# Loop through the search list and check for each substring, with case insensitivity
for (search_string in Parties) {
# Creates a regex pattern to make the match more flexible. Ex. Liberal Democrats should be catched as Liberal Democrat.
pattern <- paste0("\\b", search_string, "s?\\b")
# Adds the substring to the new column if it's found in the Text column
df_clean$Party <- ifelse(grepl(pattern, df_clean$speaker_party, ignore.case = TRUE),
ifelse(is.na(df_clean$Party), search_string,
paste(df_clean$Party, search_string, sep = ", ")),
df_clean$Party)
}
# Loop through the search list and check for each substring, with case insensitivity
for (search_string in Parties) {
# Creates a regex pattern to make the match more flexible. Ex. Liberal Democrats should be catched as Liberal Democrat.
pattern <- paste0("\\b", search_string, "s?\\b")
# Adds the substring to the new column if it's found in the Text column
df_clean$Party <- ifelse(grepl(pattern, df_clean$speaker_party, ignore.case = TRUE),
ifelse(is.na(df_clean$Party), search_string,
paste(df_clean$Party, search_string, sep = ", ")),
df_clean$Party)
}
# Check number and exact description of the remaining parties
print(paste0("The new number of distinct party values: ",n_distinct(df_clean$Party)))
print(unique(df_clean$Party))
df_clean$Party <- gsub("Co-operative, Shadow Minister, Minister", "Co-operative", df_clean$Party)
df_clean$Party <- gsub("Green, Shadow Minister, Minister", "Green", df_clean$Party)
df_clean$Party <- gsub("Conservative, Minister", "Conservative", df_clean$Party)
df_clean$Party <- gsub("Labour, Secretary", "Labour", df_clean$Party)
df_clean$Party <- gsub("Labour, Secretary, Shadow Minister, Minister", "Labour", df_clean$Party)
df_clean$Party <- gsub("Labour/Co-operative, Co-operative, Labour", "Labour/Co-operative", df_clean$Party)
df_clean$Party <- gsub("Liberal Democrat, Liberal Democrats", "Liberal Democrat", df_clean$Party)
df_clean$Party <- gsub("Labour, Shadow Minister, Minister", "Labour", df_clean$Party)
df_clean$Party <- gsub("Independent, Speaker", "Independent", df_clean$Party)
unique(df_clean$speaker_name[df_clean$Party=="Secretary, Shadow Minister, Minister"])
unique(df_clean$speaker_name[df_clean$Party=="Shadow Minister, Minister"])
unique(df_clean$speaker_name[df_clean$Party=="Secretary, Shadow Minister, Minister"])
unique(df_clean$speaker_name[df_clean$Party=="Secretary, Minister"])
unique(df_clean$speaker_name[df_clean$Party=="Speaker, Secretary"])
unique(df_clean$speaker_name[df_clean$Party=="Green, Conservative"])
unique(df_clean$speaker_name[df_clean$Party=="Labour, Green"])
unique(df_clean$speaker_name[df_clean$Party=="Liberal Democrat, DUP"])
unique(df_clean$speaker_name[df_clean$Party=="Minister"])
unique(df_clean$speaker_name[df_clean$Party=="Secretary"])
# Hand coded data frame based on the names gathered from the table before
new_party = read_excel("New party.xlsx")
library("tidyverse")
library("tidyverse")
library("httr")
library("jsonlite")
library("rvest")
library("xml2")
library("glue")
library("jsonlite")
library("rvest")
library("xml2")
library("glue")
library("data.table")
library("rvest")
library("httr")
library("jsonlite")
library("rvest")
library("xml2")
library("glue")
library("data.table")
library("rvest")
library("xml2")
library("data.table")
library("quanteda")
library("quanteda")
library("topicmodels")
library(readxl)
library(tm)
library(tidytext)
library(dplyr)
library(lubridate)    # for date conversion in data cleaning
library(udpipe)    # for POS tagging
library("quanteda")
library("topicmodels")
library(readxl)
library(tm)
library(tidytext)
library(dplyr)
library(lubridate)    # for date conversion in data cleaning
library(udpipe)    # for POS tagging
library(spacyr)    # for POS tagging
library(writexl)    # to write xlsx
# Hand coded data frame based on the names gathered from the table before
new_party = read_excel("New party.xlsx")
# Based on the previous data frame combine the names with the assigned party.
# There are no names liste twice.
df_clean <- df_clean %>%
left_join(new_party, by = "speaker_name", suffix = c("", ".new")) %>%
mutate(Party = coalesce(Party.new, Party)) %>%
select(-Party.new)
print(table(df_clean$Party))
# Delete the phrase "I beg to move" as it is mandatory at the beginning of every debate
df_clean$speech_content <- sub("^I beg to move","",df_clean$speech_content)
# List of parties in the parliament during the 10 years
# as wel as other important positions
Parties <- c("Liberal Democrat", "Liberal Democrats", "Independent",
"Labour/Co-operative", "Co-operative","Labour", "Green",
"DUP", "Speaker", "Scottish National Party", "Conservative",
"Secretary","Shadow Minister", "Minister", "Plaid Cymru")
# Initialize a new column to store the matching substring(s)
df_clean$Party <- NA
# Loop through the search list and check for each substring, with case insensitivity
for (search_string in Parties) {
# Creates a regex pattern to make the match more flexible. Ex. Liberal Democrats should be catched as Liberal Democrat.
pattern <- paste0("\\b", search_string, "s?\\b")
# Adds the substring to the new column if it's found in the Text column
df_clean$Party <- ifelse(grepl(pattern, df_clean$speaker_party, ignore.case = TRUE),
ifelse(is.na(df_clean$Party), search_string,
paste(df_clean$Party, search_string, sep = ", ")),
df_clean$Party)
}
# Check number and exact description of the remaining parties
print(paste0("The new number of distinct party values: ",n_distinct(df_clean$Party)))
print(unique(df_clean$Party))
df_clean$Party <- gsub("Co-operative, Shadow Minister, Minister", "Co-operative", df_clean$Party)
df_clean$Party <- gsub("Green, Shadow Minister, Minister", "Green", df_clean$Party)
df_clean$Party <- gsub("Conservative, Minister", "Conservative", df_clean$Party)
df_clean$Party <- gsub("Labour, Secretary", "Labour", df_clean$Party)
df_clean$Party <- gsub("Labour, Secretary, Shadow Minister, Minister", "Labour", df_clean$Party)
df_clean$Party <- gsub("Labour/Co-operative, Co-operative, Labour", "Labour/Co-operative", df_clean$Party)
df_clean$Party <- gsub("Liberal Democrat, Liberal Democrats", "Liberal Democrat", df_clean$Party)
df_clean$Party <- gsub("Labour, Shadow Minister, Minister", "Labour", df_clean$Party)
df_clean$Party <- gsub("Independent, Speaker", "Independent", df_clean$Party)
unique(df_clean$speaker_name[df_clean$Party=="Secretary, Shadow Minister, Minister"])
unique(df_clean$speaker_name[df_clean$Party=="Shadow Minister, Minister"])
unique(df_clean$speaker_name[df_clean$Party=="Secretary, Shadow Minister, Minister"])
unique(df_clean$speaker_name[df_clean$Party=="Secretary, Minister"])
unique(df_clean$speaker_name[df_clean$Party=="Speaker, Secretary"])
unique(df_clean$speaker_name[df_clean$Party=="Green, Conservative"])
unique(df_clean$speaker_name[df_clean$Party=="Labour, Green"])
unique(df_clean$speaker_name[df_clean$Party=="Liberal Democrat, DUP"])
unique(df_clean$speaker_name[df_clean$Party=="Minister"])
unique(df_clean$speaker_name[df_clean$Party=="Secretary"])
# Hand coded data frame based on the names gathered from the table before
new_party = read_excel("New party.xlsx")
# Based on the previous data frame combine the names with the assigned party.
# There are no names liste twice.
df_clean <- df_clean %>%
left_join(new_party, by = "speaker_name", suffix = c("", ".new")) %>%
mutate(Party = coalesce(Party.new, Party)) %>%
select(-Party.new)
print(table(df_clean$Party))
# Delete the phrase "I beg to move" as it is mandatory at the beginning of every debate
df_clean$speech_content <- sub("^I beg to move","",df_clean$speech_content)
# Delete the phrase "I beg to move" as it is mandatory at the beginning of every debate
df_clean$speech_content <- sub("^I beg to move","",df_clean$speech_content)
# Format the debate_date column so that it contains dates not character strings
df_clean$debate_date <- dmy(df_clean$debate_date)
# A later function needs the speeches to be in a column called 'text' so we rename it
names(df_clean)[names(df_clean) == "speech_content"] <- "text"
# Add a new column indicating whether the party was in the opposition or government at that time.
df_clean$Government_Opposition <- ifelse(
(df_clean$Party == "Conservative" & df_clean$debate_date <= as.Date("2015-05-08")) |
(df_clean$Party == "Conservative" & df_clean$debate_date > as.Date("2015-05-08")
& df_clean$debate_date < as.Date("2019-12-16")) |
(df_clean$Party == "DUP" & df_clean$debate_date > as.Date("2015-05-08")
& df_clean$debate_date < as.Date("2019-12-16")),
"Government",
ifelse(
df_clean$Party == "Conservative" & df_clean$debate_date >= as.Date("2019-12-16"),
"Government",
"Opposition"
)
)
custom_stopwords <- c("hon", "minister", "friend", "want", "can", "prime", "beg",
"parliament", "house", "commons")
tidy_speeches <- df_clean %>%
unnest_tokens(word, text) %>%
anti_join(stop_words, by = "word") %>%
filter(!word %in% custom_stopwords)
tidy_speeches <- df_clean %>%
unnest_tokens(word, text) %>%
anti_join(stop_words, by = "word") %>%
filter(!word %in% custom_stopwords)
word_counts <- tidy_speeches %>%
count(year, Government_Opposition, word, sort = TRUE)
